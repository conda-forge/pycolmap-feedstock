{% set name = "pycolmap" %}
{% set version = "3.12.3" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  - url: https://github.com/colmap/colmap/archive/{{ version }}.tar.gz
    sha256: 1ad69660bd4e15b9cdd2ef407ac11c8e39bdcdc68625c1d142b0d8e80b6b2aa7
    patches:
      - do-not-generate-stubs.patch      # [build_platform != target_platform]
      - disable-parallel-builds.patch    # [win]

build:
  number: 1
  script:
    - set CMAKE_BUILD_TYPE=Release       # [win]
    - set CMAKE_ARGS=-G Ninja            # [win]
    - set CMAKE_BUILD_PARALLEL_LEVEL=1   # [win]
    - set CUDAFLAGS=--use-local-env      # [win]
    - CXXFLAGS="${CXXFLAGS} -D_LIBCPP_DISABLE_AVAILABILITY"  # [osx]
    - {{ PYTHON }} -m pip install . -vv --no-build-isolation
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version not in (undefined, "None")]
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version in (undefined, "None")]
  skip: true  # [win and cuda_compiler_version == "11.2"]
  # weigh down cpu implementation and give cuda preference
  track_features:
    - pycolmap-cpu  # [cuda_compiler_version in (undefined, "None")]

requirements:
  build:
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version not in (undefined, "None")]
    - cmake
    - make                                   # [unix]
    - ninja
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - pybind11-stubgen                       # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - scikit-build                           # [build_platform != target_platform]
    - scikit-build-core                      # [build_platform != target_platform]
    - llvm-openmp                            # [osx]
    - libgomp                                # [linux]
  host:
    - libgl-devel                            # [linux]
    - pip
    - python
    - scikit-build
    - scikit-build-core
    - pybind11
    - pybind11-stubgen
    - numpy
    - ruff
    - black
    - isort
    - libboost-devel
    - colmap {{ version }} cpu_*                   # [cuda_compiler_version in (undefined, "None")]
    - colmap {{ version }} cuda_*                  # [cuda_compiler_version not in (undefined, "None")]
    - libblas
    - libcblas
    - cgal-cpp
    - sqlite
    - flann
    - glog
    - gflags
    - flann
    - freeimage
    - metis
    - ceres-solver
    - glew
    - vlfeat                                       # [unix]
    - gmp
    - qt-main
    - lz4-c
    - cuda-cudart-dev {{ cuda_compiler_version }}  # [(cuda_compiler_version or "").startswith("12")]
    - libcurand-dev                                # [(cuda_compiler_version or "").startswith("12")]
  run:
    - python
    - numpy
    - __cuda >={{ cuda_compiler_version }}         # [cuda_compiler_version not in (undefined, "None")]

# aarch64 failing tests
# /lib64/libm.so.6: version `GLIBC_2.27' not found
test:
  imports:   # [not aarch64]
    - pycolmap                                                                                                   # [not aarch64]
  commands:   # [not aarch64]
    - pip check                                                                                                  # [not aarch64]
    - python -c "import pycolmap; reconstruction = pycolmap.Reconstruction(); x = reconstruction.points3D"       # [not aarch64]
  requires:   # [not aarch64]
    - pip                                                                                                        # [not aarch64]

about:
  home: https://colmap.github.io/
  license: BSD-3-Clause
  license_file:
    - COPYING.txt
  summary: pycolmap exposes to Python most COLMAP reconstruction objects, such as Cameras and Points3D, as well as estimators for absolute and relative poses.

extra:
  recipe-maintainers:
    - Tobias-Fischer
